// source: proto/tictactoe.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tictactoe.v1.GameMode', null, global);
goog.exportSymbol('proto.tictactoe.v1.Header', null, global);
goog.exportSymbol('proto.tictactoe.v1.Request', null, global);
goog.exportSymbol('proto.tictactoe.v1.RequestBody', null, global);
goog.exportSymbol('proto.tictactoe.v1.RequestEvent', null, global);
goog.exportSymbol('proto.tictactoe.v1.Response', null, global);
goog.exportSymbol('proto.tictactoe.v1.ResponseBody', null, global);
goog.exportSymbol('proto.tictactoe.v1.ResponseBody.RespCase', null, global);
goog.exportSymbol('proto.tictactoe.v1.ResponseEvent', null, global);
goog.exportSymbol('proto.tictactoe.v1.Result', null, global);
goog.exportSymbol('proto.tictactoe.v1.Turn', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.v1.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.v1.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tictactoe.v1.Header.displayName = 'proto.tictactoe.v1.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.v1.RequestBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.v1.RequestBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tictactoe.v1.RequestBody.displayName = 'proto.tictactoe.v1.RequestBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.v1.ResponseBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tictactoe.v1.ResponseBody.oneofGroups_);
};
goog.inherits(proto.tictactoe.v1.ResponseBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tictactoe.v1.ResponseBody.displayName = 'proto.tictactoe.v1.ResponseBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.v1.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.v1.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tictactoe.v1.Request.displayName = 'proto.tictactoe.v1.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.v1.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.v1.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tictactoe.v1.Response.displayName = 'proto.tictactoe.v1.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.v1.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.v1.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.v1.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.v1.Header}
 */
proto.tictactoe.v1.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.v1.Header;
  return proto.tictactoe.v1.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.v1.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.v1.Header}
 */
proto.tictactoe.v1.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.v1.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.v1.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.v1.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Token = 1;
 * @return {string}
 */
proto.tictactoe.v1.Header.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.v1.Header} returns this
 */
proto.tictactoe.v1.Header.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.v1.RequestBody.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.v1.RequestBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.v1.RequestBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.RequestBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    move: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameMode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.v1.RequestBody}
 */
proto.tictactoe.v1.RequestBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.v1.RequestBody;
  return proto.tictactoe.v1.RequestBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.v1.RequestBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.v1.RequestBody}
 */
proto.tictactoe.v1.RequestBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMove(value);
      break;
    case 2:
      var value = /** @type {!proto.tictactoe.v1.GameMode} */ (reader.readEnum());
      msg.setGameMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.v1.RequestBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.v1.RequestBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.v1.RequestBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.RequestBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGameMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 move = 1;
 * @return {number}
 */
proto.tictactoe.v1.RequestBody.prototype.getMove = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.v1.RequestBody} returns this
 */
proto.tictactoe.v1.RequestBody.prototype.setMove = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GameMode game_mode = 2;
 * @return {!proto.tictactoe.v1.GameMode}
 */
proto.tictactoe.v1.RequestBody.prototype.getGameMode = function() {
  return /** @type {!proto.tictactoe.v1.GameMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tictactoe.v1.GameMode} value
 * @return {!proto.tictactoe.v1.RequestBody} returns this
 */
proto.tictactoe.v1.RequestBody.prototype.setGameMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tictactoe.v1.ResponseBody.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tictactoe.v1.ResponseBody.RespCase = {
  RESP_NOT_SET: 0,
  MOVE: 1,
  TURN: 2
};

/**
 * @return {proto.tictactoe.v1.ResponseBody.RespCase}
 */
proto.tictactoe.v1.ResponseBody.prototype.getRespCase = function() {
  return /** @type {proto.tictactoe.v1.ResponseBody.RespCase} */(jspb.Message.computeOneofCase(this, proto.tictactoe.v1.ResponseBody.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.v1.ResponseBody.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.v1.ResponseBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.v1.ResponseBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.ResponseBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    move: jspb.Message.getFieldWithDefault(msg, 1, 0),
    turn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    result: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.v1.ResponseBody}
 */
proto.tictactoe.v1.ResponseBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.v1.ResponseBody;
  return proto.tictactoe.v1.ResponseBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.v1.ResponseBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.v1.ResponseBody}
 */
proto.tictactoe.v1.ResponseBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMove(value);
      break;
    case 2:
      var value = /** @type {!proto.tictactoe.v1.Turn} */ (reader.readEnum());
      msg.setTurn(value);
      break;
    case 3:
      var value = /** @type {!proto.tictactoe.v1.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.v1.ResponseBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.v1.ResponseBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.v1.ResponseBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.ResponseBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.tictactoe.v1.Turn} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 move = 1;
 * @return {number}
 */
proto.tictactoe.v1.ResponseBody.prototype.getMove = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.v1.ResponseBody} returns this
 */
proto.tictactoe.v1.ResponseBody.prototype.setMove = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.tictactoe.v1.ResponseBody.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tictactoe.v1.ResponseBody} returns this
 */
proto.tictactoe.v1.ResponseBody.prototype.clearMove = function() {
  return jspb.Message.setOneofField(this, 1, proto.tictactoe.v1.ResponseBody.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.v1.ResponseBody.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Turn turn = 2;
 * @return {!proto.tictactoe.v1.Turn}
 */
proto.tictactoe.v1.ResponseBody.prototype.getTurn = function() {
  return /** @type {!proto.tictactoe.v1.Turn} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tictactoe.v1.Turn} value
 * @return {!proto.tictactoe.v1.ResponseBody} returns this
 */
proto.tictactoe.v1.ResponseBody.prototype.setTurn = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.tictactoe.v1.ResponseBody.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tictactoe.v1.ResponseBody} returns this
 */
proto.tictactoe.v1.ResponseBody.prototype.clearTurn = function() {
  return jspb.Message.setOneofField(this, 2, proto.tictactoe.v1.ResponseBody.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.v1.ResponseBody.prototype.hasTurn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Result result = 3;
 * @return {!proto.tictactoe.v1.Result}
 */
proto.tictactoe.v1.ResponseBody.prototype.getResult = function() {
  return /** @type {!proto.tictactoe.v1.Result} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.tictactoe.v1.Result} value
 * @return {!proto.tictactoe.v1.ResponseBody} returns this
 */
proto.tictactoe.v1.ResponseBody.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.v1.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.v1.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.v1.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, 0),
    header: (f = msg.getHeader()) && proto.tictactoe.v1.Header.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.tictactoe.v1.RequestBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.v1.Request}
 */
proto.tictactoe.v1.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.v1.Request;
  return proto.tictactoe.v1.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.v1.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.v1.Request}
 */
proto.tictactoe.v1.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tictactoe.v1.RequestEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.tictactoe.v1.Header;
      reader.readMessage(value,proto.tictactoe.v1.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.tictactoe.v1.RequestBody;
      reader.readMessage(value,proto.tictactoe.v1.RequestBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.v1.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.v1.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.v1.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tictactoe.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tictactoe.v1.RequestBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestEvent event = 1;
 * @return {!proto.tictactoe.v1.RequestEvent}
 */
proto.tictactoe.v1.Request.prototype.getEvent = function() {
  return /** @type {!proto.tictactoe.v1.RequestEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tictactoe.v1.RequestEvent} value
 * @return {!proto.tictactoe.v1.Request} returns this
 */
proto.tictactoe.v1.Request.prototype.setEvent = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Header header = 2;
 * @return {?proto.tictactoe.v1.Header}
 */
proto.tictactoe.v1.Request.prototype.getHeader = function() {
  return /** @type{?proto.tictactoe.v1.Header} */ (
    jspb.Message.getWrapperField(this, proto.tictactoe.v1.Header, 2));
};


/**
 * @param {?proto.tictactoe.v1.Header|undefined} value
 * @return {!proto.tictactoe.v1.Request} returns this
*/
proto.tictactoe.v1.Request.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tictactoe.v1.Request} returns this
 */
proto.tictactoe.v1.Request.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.v1.Request.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestBody body = 3;
 * @return {?proto.tictactoe.v1.RequestBody}
 */
proto.tictactoe.v1.Request.prototype.getBody = function() {
  return /** @type{?proto.tictactoe.v1.RequestBody} */ (
    jspb.Message.getWrapperField(this, proto.tictactoe.v1.RequestBody, 3));
};


/**
 * @param {?proto.tictactoe.v1.RequestBody|undefined} value
 * @return {!proto.tictactoe.v1.Request} returns this
*/
proto.tictactoe.v1.Request.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tictactoe.v1.Request} returns this
 */
proto.tictactoe.v1.Request.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.v1.Request.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.v1.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.v1.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.v1.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: jspb.Message.getFieldWithDefault(msg, 1, 0),
    header: (f = msg.getHeader()) && proto.tictactoe.v1.Header.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.tictactoe.v1.ResponseBody.toObject(includeInstance, f),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.v1.Response}
 */
proto.tictactoe.v1.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.v1.Response;
  return proto.tictactoe.v1.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.v1.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.v1.Response}
 */
proto.tictactoe.v1.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tictactoe.v1.ResponseEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.tictactoe.v1.Header;
      reader.readMessage(value,proto.tictactoe.v1.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.tictactoe.v1.ResponseBody;
      reader.readMessage(value,proto.tictactoe.v1.ResponseBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.v1.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.v1.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.v1.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.v1.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tictactoe.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tictactoe.v1.ResponseBody.serializeBinaryToWriter
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional ResponseEvent event = 1;
 * @return {!proto.tictactoe.v1.ResponseEvent}
 */
proto.tictactoe.v1.Response.prototype.getEvent = function() {
  return /** @type {!proto.tictactoe.v1.ResponseEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tictactoe.v1.ResponseEvent} value
 * @return {!proto.tictactoe.v1.Response} returns this
 */
proto.tictactoe.v1.Response.prototype.setEvent = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Header header = 2;
 * @return {?proto.tictactoe.v1.Header}
 */
proto.tictactoe.v1.Response.prototype.getHeader = function() {
  return /** @type{?proto.tictactoe.v1.Header} */ (
    jspb.Message.getWrapperField(this, proto.tictactoe.v1.Header, 2));
};


/**
 * @param {?proto.tictactoe.v1.Header|undefined} value
 * @return {!proto.tictactoe.v1.Response} returns this
*/
proto.tictactoe.v1.Response.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tictactoe.v1.Response} returns this
 */
proto.tictactoe.v1.Response.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.v1.Response.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseBody body = 3;
 * @return {?proto.tictactoe.v1.ResponseBody}
 */
proto.tictactoe.v1.Response.prototype.getBody = function() {
  return /** @type{?proto.tictactoe.v1.ResponseBody} */ (
    jspb.Message.getWrapperField(this, proto.tictactoe.v1.ResponseBody, 3));
};


/**
 * @param {?proto.tictactoe.v1.ResponseBody|undefined} value
 * @return {!proto.tictactoe.v1.Response} returns this
*/
proto.tictactoe.v1.Response.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tictactoe.v1.Response} returns this
 */
proto.tictactoe.v1.Response.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.v1.Response.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string error_message = 4;
 * @return {string}
 */
proto.tictactoe.v1.Response.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.v1.Response} returns this
 */
proto.tictactoe.v1.Response.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.tictactoe.v1.RequestEvent = {
  REQUEST_EVENT_JOIN: 0,
  REQUEST_EVENT_MOVE: 1,
  REQUEST_EVENT_REMATCH: 2,
  REQUEST_EVENT_CLOSE: 3,
  REQUEST_EVENT_RESTART: 4
};

/**
 * @enum {number}
 */
proto.tictactoe.v1.ResponseEvent = {
  RESPONSE_EVENT_START: 0,
  RESPONSE_EVENT_MOVE: 1,
  RESPONSE_EVENT_END: 2,
  RESPONSE_EVENT_REMATCH_ACCEPTED: 3,
  RESPONSE_EVENT_ROOM_CREATED: 4,
  RESPONSE_EVENT_ROOM_CLOSED: 5,
  RESPONSE_EVENT_ERROR: 6
};

/**
 * @enum {number}
 */
proto.tictactoe.v1.GameMode = {
  MODE_SINGLE_PLAYER: 0,
  MODE_DOUBLE_PLAYER: 1
};

/**
 * @enum {number}
 */
proto.tictactoe.v1.Result = {
  RESULT_VICTORY: 0,
  RESULT_DEFEAT: 1,
  RESULT_DRAW: 2
};

/**
 * @enum {number}
 */
proto.tictactoe.v1.Turn = {
  PLAYER_ONE: 0,
  PLAYER_TWO: 1
};

goog.object.extend(exports, proto.tictactoe.v1);
